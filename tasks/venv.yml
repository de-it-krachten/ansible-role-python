---

- name: Define virtual environment full path  # noqa jinja[spacing]
  ansible.builtin.set_fact:
    _virtualenv_path: >-
      {%- if virtualenv_path is search('^/') -%}
      {{ virtualenv_path }}
      {%- else -%}
      {{ python_virtualenv_root + '/' + virtualenv_path }}
      {%- endif -%}

- name: Show virtual environment settings
  ansible.builtin.debug:
    msg:
      virtualenv: "{{ _virtualenv_path }}"
      virtualenv_command: "{{ virtualenv_command }}"
      virtualenv_python: "{{ virtualenv_python }}"
      virtualenv_site_packages: "{{ virtualenv_site_packages }}"
      virtualenv_pip_upgrade: "{{ virtualenv_pip_upgrade }}"
      virtualenv_packages: "{{ virtualenv_packages }}"
      virtualenv_user: "{{ virtualenv_user }}"

- name: Test if virtualenv already exists
  ansible.builtin.stat:
    path: "{{ _virtualenv_path }}"
  register: venv_root

- name: Delete virtualenv if recreate is required
  ansible.builtin.file:
    path: "{{ _virtualenv_path }}"
    state: absent
  become: yes
  become_user: root
  when:
    - virtualenv_recreate | bool
    - venv_root.stat.exists | bool
    - molecule_test is not defined

- name: Make path to virtualenv
  ansible.builtin.file:
    path: "{{ _virtualenv_path }}"
    state: directory
    mode: '0755'
  become: yes
  become_user: "{{ virtualenv_user }}"
  register: venv_root

- name: Create virtualenv from scratch  # noqa no-handler
  ansible.builtin.pip:
    name: "{{ python_virtualenv_packages }}"
    virtualenv: "{{ _virtualenv_path }}"
    virtualenv_command: "{{ virtualenv_command }}"
    virtualenv_python: "{{ virtualenv_python if virtualenv_python is not search('python3') else omit }}"
    virtualenv_site_packages: "{{ virtualenv_site_packages }}"
    extra_args: "{{ '--upgrade' if (python_virtualenv_upgrade | bool) else omit }}"
  environment:
    HTTP_PROXY: "{{ python_http_proxy | default('') }}"
    HTTPS_PROXY: "{{ python_https_proxy | default('') }}"
  become: yes
  become_user: "{{ virtualenv_user }}"
  when:
    - venv_root.changed | bool
    - virtualenv_source == 'skip'

- name: Clone virtualenv
  ansible.builtin.include_tasks: venv_clone.yml
  vars:
    venv_source_path: "{{ virtualenv_source if virtualenv_source is search('^/') else _virtualenv_path | dirname + '/' + virtualenv_source }}"
    venv_target_path: "{{ _virtualenv_path }}"
  args:
    apply:
      become: yes
      become_user: "{{ virtualenv_user }}"
  when: venv_root.changed | bool and virtualenv_source != 'skip'

- name: Upgrade pip to latest version
  ansible.builtin.include_tasks: pip.yml
  args:
    apply:
      become: yes
      become_user: "{{ virtualenv_user }}"
  when: virtualenv_pip_upgrade | bool

- name: Install all pip packages
  ansible.builtin.pip:
    name: "{{ virtualenv_packages }}"
    virtualenv: "{{ _virtualenv_path }}"
    extra_args: "{{ python_trusted_hosts if python_trust_hosts | bool else omit }}"
  environment:
    HTTP_PROXY: "{{ python_http_proxy | default('') }}"
    HTTPS_PROXY: "{{ python_https_proxy | default('') }}"
  become: yes
  become_user: "{{ virtualenv_user }}"

- name: Create symlink to virtualenv
  ansible.builtin.file:
    state: link
    src: "{{ virtualenv_name }}"
    dest: "{{ _virtualenv_path | dirname }}/{{ virtualenv_label }}"
  become: yes
  become_user: "{{ virtualenv_user }}"
  when: virtualenv_label != 'skip'
