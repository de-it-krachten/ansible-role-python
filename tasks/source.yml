---

- name: Test if python {{ python_version_minor }} is installed  # noqa name[template]
  ansible.builtin.command: "{{ python_binary }} --version"
  register: python_bin
  changed_when: no
  failed_when: no
  check_mode: no
  environment:
    PATH: /usr/local/bin:{{ ansible_env.PATH }}

- name: Set python version installed
  ansible.builtin.set_fact:
    python_installed: "{{ python_bin.stdout.split(' ')[1] if (python_bin.stdout is defined and python_bin.stdout | length > 0) else 'none' }}"


- name: Display python version found
  ansible.builtin.debug:
    msg:
      - "python {{ python_version_minor }} version installed : {{ python_installed }}"
      - "python {{ python_version_minor }} version required  : {{ python_version }}"

- name:  Install from source
  when: python_installed == 'none' or python_installed is version(python_version, '<')
  block:

    - name: Install all required packages
      ansible.builtin.package:
        name: "{{ python3_packages_src }}"
        state: present
      register: _package_result

    - name: Show packaged installed and/or updated
      ansible.builtin.debug:
        var: _package_result.results
      when:
        - _package_result.results is defined
        - _package_result.results | length > 0

    - name: Download python
      ansible.builtin.unarchive:
        src: "{{ python_url }}"
        dest: /opt
        remote_src: true

    - name: Compile python  # noqa no-changed-when
      ansible.builtin.shell: |
        cd /opt/Python-{{ python_version }}
        ./configure --enable-optimizations
        make altinstall
